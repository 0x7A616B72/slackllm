import boto3
import datetime
from botocore.exceptions import ClientError
from config import logger, DEFAULT_BEDROCK_MODEL_ID
from service.user_preferences_accessor import UserPreferencesAccessor

class BedrockService:
    def __init__(self):
        self.client = boto3.client("bedrock-runtime")
        self.user_preferences = UserPreferencesAccessor()

    def invoke_model(self, messages, model_id=None, user_id=None):
        """
        Invokes a bedrock model using the provided messages.

        Args:
            messages (list): A list of messages to be sent to the model.
            model_id (str, optional): The specific model ID to use. Defaults to None.
            user_id (str, optional): The Slack user ID. Defaults to None.

        Returns:
            str: The output text generated by the model.

        Raises:
            ClientError: If there's an error invoking the Bedrock model.
        """
        try:
            model_id = model_id or DEFAULT_BEDROCK_MODEL_ID
            logger.info(f"Invoking model {model_id} with {len(messages)} messages.")

            system_prompt = None
            if user_id:
                system_prompt = self.user_preferences.get_user_system_prompt(user_id, model_id)

            # If no custom system prompt, use default
            if not system_prompt:
                system_prompt = self._get_default_system_prompt()
            else:
                # Replace datetime placeholder with current UTC time
                current_utc = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
                system_prompt = system_prompt.replace("{datetime}", current_utc)
            logger.info(f"Latest message text: {messages[-1]['content'][0]['text']}")
            logger.info(f"Using system prompt: {system_prompt}")
            response = self.client.converse(
                messages=messages,
                modelId=model_id,
                system=[{"text": system_prompt}],
            )

            output_text = "".join(
                content["text"] for content in response["output"]["message"]["content"]
            )

            self._log_usage_metrics(response)
            return output_text

        except ClientError as e:
            logger.error(f"ERROR: Can't invoke '{model_id}'. Reason: {e}")
            raise
        except Exception as e:
            logger.error(f"Unexpected error occurred: {e}")
            raise

    def _log_usage_metrics(self, response):
        """Log token usage and other metrics from the model response."""
        token_usage = response["usage"]
        logger.info(f"Input tokens: {token_usage['inputTokens']}")
        logger.info(f"Output tokens: {token_usage['outputTokens']}")
        logger.info(f"Total tokens: {token_usage['totalTokens']}")
        logger.info(f"Stop reason: {response['stopReason']}")

    def _get_default_system_prompt(self):
        """Returns the default system prompt."""
        return f"You are a helpful AI assistant. The current time is {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")}."